{
  "name": "grunt-mocha-runner",
  "description": "Serve a mocha runner page with the source and spec script paths configured in your Gruntfile",
  "version": "0.2.0",
  "homepage": "",
  "author": {
    "name": "justinvdm"
  },
  "repository": {
    "type": "git",
    "url": ""
  },
  "license": "MIT",
  "main": "Gruntfile.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "devDependencies": {
    "grunt": "~0.4.1",
    "grunt-mocha-test": "~0.6.3",
    "grunt-contrib-jshint": "~0.6.3"
  },
  "peerDependencies": {
    "grunt": "~0.4.1"
  },
  "keywords": [
    "gruntplugin",
    "mocha",
    "test",
    "browser"
  ],
  "dependencies": {
    "connect": "~2.8.5",
    "tmp": "0.0.21",
    "chai": "~1.7.2",
    "mocha": "~1.12.0"
  },
  "readme": "# grunt-mocha-runner\n\nServe a mocha runner page with the source and spec script paths configured in your Gruntfile.\n\n## Getting Started\nThis plugin requires Grunt `~0.4.1`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-mocha-runner --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-mocha-runner');\n```\n\n## The mochaRunner task\n\n### Overview\nIn your project's Gruntfile, add a section named `mochaRunner` to the data object passed into `grunt.initConfig()`.\n\n```js\ngrunt.initConfig({\n  mochaRunner: {\n    all: {\n      scripts: [\n        'src/*.js',\n        'test/spec/*.js'],\n      styles: ['styles/*.css']\n    },\n  },\n})\n```\n\n### Options\n\n#### port\nType: `Integer`\nDefault value: `8000`\n\nThe port on which to serve the test runner. \n\n#### hostname\nType: `String`\nDefault: `'localhost'`\n\nThe hostname on which to serve the test runner. \n\nSetting it to `'*'` will make the it accessible from anywhere.\n\n#### title\nType: `String`\nDefault: `'Mocha Spec Runner'`\n\nThe title of the test runner page.\n\n#### ui\nType: `String`\nDefault: `'bdd'`\n\nThe mocha ui type to use with `mocha.setup()`.\n\n## Usage example\n\nThe mochaRunner task builds and serves the mocha test runner page, but doesn't handle the actual opening of the page to run the tests. For that, we need an additional grunt task. [grunt-mocha](https://github.com/kmiyashiro/grunt-mocha) works really well for this. Here is a basic Gruntfile example showing grunt-mocha and grunt-mocha-runner being used together:\n\n```javascript\nmodule.exports = function (grunt) {\n  grunt.loadNpmTasks('grunt-mocha');\n  grunt.loadNpmTasks('grunt-mocha-runner');\n\n  grunt.initConfig({\n    // serves the runner page\n    mochaRunner: {\n      all: {\n        scripts: [\n          'test/app/spec/**/*.js',\n          'app/scripts/**/*.js'],\n      }\n    },\n    // opens the runner page to run the tests\n    mocha: {\n      options: {\n        run: true,\n        reporter: 'Spec',\n      },\n      test: {\n        options: {\n          // url to the runner page served by mochaRunner\n          urls: ['http://localhost:8000']\n        }\n      }\n    }\n  });\n\n  grunt.registerTask('test', [\n    'mochaRunner',\n    'mocha'\n  ]);\n};\n```\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using: \n\n```\n$ grunt\n```\n",
  "readmeFilename": "README.md",
  "_id": "grunt-mocha-runner@0.2.0",
  "dist": {
    "shasum": "bbcc10e5507793ed3192e7057c9fa3483a6a4392"
  },
  "_from": "grunt-mocha-runner@",
  "_resolved": "https://registry.npmjs.org/grunt-mocha-runner/-/grunt-mocha-runner-0.2.0.tgz"
}
